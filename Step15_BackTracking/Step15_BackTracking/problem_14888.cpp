/*
   #. [ 백준_14888번 연산자 끼워넣기 ]
   
   #. 문제
      N개의 수로 이루어진 수열 A1, A2, ..., AN이 주어진다. 
      또, 수와 수 사이에 끼워넣을 수 있는 N-1개의 연산자가 주어진다. 
      연산자는 덧셈(+), 뺄셈(-), 곱셈(×), 나눗셈(÷)으로만 이루어져 있다.
      
      우리는 수와 수 사이에 연산자를 하나씩 넣어서, 수식을 하나 만들 수 있다. 
      이때, 주어진 수의 순서를 바꾸면 안 된다.
      
      예를 들어, 6개의 수로 이루어진 수열이 1, 2, 3, 4, 5, 6이고, 주어진 연산자가 덧셈(+) 2개, 뺄셈(-) 1개, 
      곱셈(×) 1개, 나눗셈(÷) 1개인 경우에는 총 60가지의 식을 만들 수 있다. 
      예를 들어, 아래와 같은 식을 만들 수 있다.
      
      1+2+3-4×5÷6
      1÷2+3+4-5×6
      1+2÷3×4-5+6
      1÷2×3-4+5+6
      
      식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 한다. 
      또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 
      즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다. 
      이에 따라서, 위의 식 4개의 결과를 계산해보면 아래와 같다.
      
      1+2+3-4×5÷6 = 1
      1÷2+3+4-5×6 = 12
      1+2÷3×4-5+6 = 5
      1÷2×3-4+5+6 = 7
      
      N개의 수와 N-1개의 연산자가 주어졌을 때, 만들 수 있는 식의 결과가 최대인 것과 최소인 것을 구하는 프로그램을 작성하시오.
   
   #. 입력
      첫째 줄에 수의 개수 N(2 ≤ N ≤ 11)가 주어진다. 
      둘째 줄에는 A1, A2, ..., AN이 주어진다. (1 ≤ Ai ≤ 100) 
      셋째 줄에는 합이 N-1인 4개의 정수가 주어지는데, 차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수이다. 
      
   #. 출력
      첫째 줄에 만들 수 있는 식의 결과의 최댓값을, 둘째 줄에는 최솟값을 출력한다. 
      연산자를 어떻게 끼워넣어도 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다. 
      또한, 앞에서부터 계산했을 때, 중간에 계산되는 식의 결과도 항상 -10억보다 크거나 같고, 10억보다 작거나 같다.
      
   #. 예제 입력 1 
      2
      5 6
      0 0 1 0
   #. 예제 출력 1 
      30
      30
   
   #. 예제 입력 2 
      3
      3 4 5
      1 0 1 0
   #. 예제 출력 2 
      35
      17
   
   #. 예제 입력 3 
      6
      1 2 3 4 5 6
      2 1 1 1
   #. 예제 출력 3 
      54
      -24
*/
/*
   #. 나의 풀이법.
      - 그저께 풀었을 때에는 감이 오지 않았다. 
      - 오늘 다시 풀어보니 풀렸다.
      - 연산자를 나열할 수 있는 모든 경우를 찾고,
        각 경우에서 numbers[]에 있는 숫자들을 사용하여 순서대로 계산한다.
        각 경우에서 계산한 값들을 answer 벡터에 삽입하고
        정렬 후, 최댓값, 최솟값 찾는다.

      - 정답 찾는 거 수정함.
        _min을 10억. _max를 -10억으로 두고, 각 경우를 비교하여 정답을 구한다.

*/
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int n;
int operators[4];
int numbers[20];
vector<int> allOperators;
bool check[19];

vector<int> combination;
int _max = -1000000000;
int _min = 1000000000;

void dfs(int count)
{
    //연산자 나열하는 경우가 완성되면, numbers[]순서대로 연산 진행.
    if(count == n - 1)
    {
        int total = numbers[1];
        for (int i = 0; i < combination.size(); i++)
        {
            switch (combination[i])
            {
            case 0: // +
                total += numbers[i + 1];
                break;
            case 1: // -
                total -= numbers[i + 1];
                break;
            case 2: // *
                total *= numbers[i + 1];
                break;
            case 3: // /
                total /= numbers[i + 1];
                break;
            }
            if (_max < total)
                _max = total;
            if (_min > total)
                _min = total;
        }
        return;
    }

    for (int i = 0; i < allOperators.size(); i++)
    {
        if (!check[i])
        {
            check[i] = true;
            combination.push_back(allOperators[i]);
            dfs(count + 1);
            combination.pop_back();
            check[i] = false;
        }
    }
}

int main()
{
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> numbers[i];

    for (int i = 0; i < 4; i++)
        cin >> operators[i];

    for (int i = 0; i < 4; i++)
    {
        if (operators[i] > 1)
        {
            for (int j = 0; j < operators[i]; j++)
                allOperators.push_back(i);
        }
        else if (operators[i] == 1)
            allOperators.push_back(i);
    }

    dfs(0);

    
    cout << _max << "\n";
    cout << _min << "\n";

    return 0;
}