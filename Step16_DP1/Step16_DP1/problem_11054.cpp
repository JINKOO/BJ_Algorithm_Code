/*
    #. [ 백준_11054번_가장 긴 바이토닉 부분 수열 ] Gold III
	
	#. 문제
	   수열 S가 어떤 수 Sk를 기준으로 S1 < S2 < ... Sk-1 < Sk > Sk+1 > ... SN-1 > SN을 만족한다면, 그 수열을 바이토닉 수열이라고 한다.
	   예를 들어, {10, 20, 30, 25, 20}과 {10, 20, 30, 40}, {50, 40, 25, 10} 은 바이토닉 수열이지만,  
	   {1, 2, 3, 2, 1, 2, 3, 2, 1}과 {10, 20, 30, 40, 20, 30} 은 바이토닉 수열이 아니다.
	   
	   수열 A가 주어졌을 때, 그 수열의 부분 수열 중 바이토닉 수열이면서 가장 긴 수열의 길이를 구하는 프로그램을 작성하시오.
	   
	#. 입력
	   첫째 줄에 수열 A의 크기 N이 주어지고, 둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. 
	   (1 ≤ N ≤ 1,000, 1 ≤ Ai ≤ 1,000)

    #. 출력
	   첫째 줄에 수열 A의 부분 수열 중에서 가장 긴 바이토닉 수열의 길이를 출력한다.
	   
	#. 예제 입력 1 
	   10
	   1 5 2 1 4 3 4 5 2 1
    #. 예제 출력 1 
	   7
	
	#. 힌트
	   예제의 경우 {1 5 2 1 4 3 4 5 2 1}이 가장 긴 바이토닉 부분 수열이다. 
*/

/*
    #. 풀이법.
	   - 처음 접근 하였을 때, 뭔가 막막하였다.
	   - 가장 긴 증가하는 수열의 길이 + 가장 긴 감소하는 수열의 길이
	   - dp[]가 2개 필요하다.

*/
#include <iostream>
using namespace std;

int n;
int dp[1001];
int dp_reverse[1001];
int cost[1001];

int solution()
{
	int answer = 0;
	//1. 가장 긴 증가하는 수열 길이 찾기
	for (int i = 1; i <= n; i++)
	{
		int max_dp = 0;
		for (int j = 1; j < i; j++)
		{
			if (cost[i] > cost[j])
			{
				if (max_dp < dp[j])
					max_dp = dp[j];
			}
		}
		dp[i] = max_dp + 1;
	}

	//2. 가장 긴 감소하는 수열 길이 찾기
	for (int i = n; i >= 1; i--)
	{
		int max_dp = 0;
		for (int j = n; j > i; j--)
		{
			if (cost[i] > cost[j])
			{
				if (max_dp < dp_reverse[j])
					max_dp = dp_reverse[j];
			}
		}
		dp_reverse[i] = max_dp + 1;
	}

	for (int i = 1; i <= n; i++)
	{
		if (answer < dp[i] + dp_reverse[i] - 1)
			answer = dp[i] + dp_reverse[i] - 1;
	}
	return answer;
}

int main()
{
	cin >> n;

	for (int i = 1; i <= n; i++)
	{
		cin >> cost[i];
	}

	cout << solution() << "\n";

	return 0;
}